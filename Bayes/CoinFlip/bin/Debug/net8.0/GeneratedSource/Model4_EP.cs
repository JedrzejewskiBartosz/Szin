// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2504.701 at 19:28 on sobota, 12 kwietnia 2025.
	/// </remarks>
	public partial class Model4_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_numberOfIterations_vdouble6_vdouble7_vdouble8 has executed. Set this to false to force re-execution of Changed_numberOfIterations_vdouble6_vdouble7_vdouble8</summary>
		public bool Changed_numberOfIterations_vdouble6_vdouble7_vdouble8_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_vdouble6_vdouble7_vdouble8 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_vdouble6_vdouble7_vdouble8</summary>
		public bool Changed_numberOfIterationsDecreased_Init_vdouble6_vdouble7_vdouble8_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_vdouble6_vdouble7_vdouble8 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_vdouble6_vdouble7_vdouble8</summary>
		public bool Changed_numberOfIterationsDecreased_Init_vdouble6_vdouble7_vdouble8_isInitialised;
		/// <summary>True if Changed_vdouble6 has executed. Set this to false to force re-execution of Changed_vdouble6</summary>
		public bool Changed_vdouble6_isDone;
		/// <summary>True if Changed_vdouble7 has executed. Set this to false to force re-execution of Changed_vdouble7</summary>
		public bool Changed_vdouble7_isDone;
		/// <summary>True if Changed_vdouble8 has executed. Set this to false to force re-execution of Changed_vdouble8</summary>
		public bool Changed_vdouble8_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Message to marginal of 'mean'</summary>
		public Gaussian mean_marginal_F;
		/// <summary>Messages to uses of 'mean_use'</summary>
		public Gaussian[] mean_uses_F;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		public Gamma variance_F;
		/// <summary>Message to marginal of 'variance'</summary>
		public Gamma variance_marginal_F;
		/// <summary>Messages from uses of 'variance_use'</summary>
		public Gamma[] variance_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gamma&gt;</summary>
		public Gamma variance_uses_B_toDef;
		/// <summary>Field backing the vdouble6 property</summary>
		private double vdouble6_field;
		/// <summary>Message to marginal of 'vdouble6'</summary>
		public Gaussian vdouble6_marginal_F;
		/// <summary>Field backing the vdouble7 property</summary>
		private double vdouble7_field;
		/// <summary>Message to marginal of 'vdouble7'</summary>
		public Gaussian vdouble7_marginal_F;
		/// <summary>Field backing the vdouble8 property</summary>
		private double vdouble8_field;
		/// <summary>Message to marginal of 'vdouble8'</summary>
		public Gaussian vdouble8_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'vdouble6'</summary>
		public double vdouble6
		{
			get {
				return this.vdouble6_field;
			}
			set {
				if (this.vdouble6_field!=value) {
					this.vdouble6_field = value;
					this.numberOfIterationsDone = 0;
					this.Changed_vdouble6_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_vdouble6_vdouble7_vdouble8_isInitialised = false;
					this.Changed_numberOfIterations_vdouble6_vdouble7_vdouble8_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'vdouble7'</summary>
		public double vdouble7
		{
			get {
				return this.vdouble7_field;
			}
			set {
				if (this.vdouble7_field!=value) {
					this.vdouble7_field = value;
					this.numberOfIterationsDone = 0;
					this.Changed_vdouble7_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_vdouble6_vdouble7_vdouble8_isInitialised = false;
					this.Changed_numberOfIterations_vdouble6_vdouble7_vdouble8_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'vdouble8'</summary>
		public double vdouble8
		{
			get {
				return this.vdouble8_field;
			}
			set {
				if (this.vdouble8_field!=value) {
					this.vdouble8_field = value;
					this.numberOfIterationsDone = 0;
					this.Changed_vdouble8_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_vdouble6_vdouble7_vdouble8_isInitialised = false;
					this.Changed_numberOfIterations_vdouble6_vdouble7_vdouble8_isDone = false;
				}
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of numberOfIterations and vdouble6 and vdouble7 and vdouble8</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterations_vdouble6_vdouble7_vdouble8(int numberOfIterations)
		{
			if (this.Changed_numberOfIterations_vdouble6_vdouble7_vdouble8_isDone) {
				return ;
			}
			Gaussian mean_F = Gaussian.Uniform();
			this.mean_marginal_F = Gaussian.Uniform();
			Gaussian mean_uses_F_marginal;
			mean_uses_F_marginal = ReplicateOp_Divide.MarginalInit<Gaussian>(mean_F);
			Gaussian mean_uses_B_toDef;
			mean_uses_B_toDef = ReplicateOp_Divide.ToDefInit<Gaussian>(mean_F);
			// Message to 'mean' from GaussianFromMeanAndVariance factor
			mean_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(0.0, 1.0);
			Gaussian[] mean_uses_B;
			// Create array for 'mean_uses' Backwards messages.
			mean_uses_B = new Gaussian[3];
			mean_uses_B[2] = Gaussian.Uniform();
			mean_uses_B[1] = Gaussian.Uniform();
			mean_uses_B[0] = Gaussian.Uniform();
			Gamma variance_uses_F_marginal;
			variance_uses_F_marginal = ReplicateOp_Divide.MarginalInit<Gamma>(this.variance_F);
			// Message to 'variance' from Sample factor
			this.variance_F = GammaFromShapeAndScaleOp.SampleAverageConditional(1.0, 1.0);
			Gamma[] variance_uses_F;
			// Create array for 'variance_uses' Forwards messages.
			variance_uses_F = new Gamma[3];
			variance_uses_F[1] = Gamma.Uniform();
			variance_uses_F[2] = Gamma.Uniform();
			variance_uses_F[0] = Gamma.Uniform();
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				variance_uses_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(this.variance_uses_B_toDef, this.variance_F, variance_uses_F_marginal);
				// Message to 'variance_uses' from Replicate factor
				variance_uses_F[0] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.variance_uses_B[0], variance_uses_F_marginal, 0, variance_uses_F[0]);
				// Message to 'mean_uses' from Gaussian factor
				mean_uses_B[0] = GaussianOp.MeanAverageConditional(this.vdouble6, this.mean_uses_F[0], variance_uses_F[0], this.variance_uses_B[0]);
				// Message to 'variance_uses' from Replicate factor
				variance_uses_F[2] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.variance_uses_B[2], variance_uses_F_marginal, 2, variance_uses_F[2]);
				// Message to 'mean_uses' from Gaussian factor
				mean_uses_B[2] = GaussianOp.MeanAverageConditional(this.vdouble8, this.mean_uses_F[2], variance_uses_F[2], this.variance_uses_B[2]);
				// Message to 'variance_uses' from Replicate factor
				variance_uses_F[1] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.variance_uses_B[1], variance_uses_F_marginal, 1, variance_uses_F[1]);
				// Message to 'mean_uses' from Gaussian factor
				mean_uses_B[1] = GaussianOp.MeanAverageConditional(this.vdouble7, this.mean_uses_F[1], variance_uses_F[1], this.variance_uses_B[1]);
				mean_uses_B_toDef = ReplicateOp_Divide.ToDef<Gaussian>(mean_uses_B, mean_uses_B_toDef);
				mean_uses_F_marginal = ReplicateOp_Divide.Marginal<Gaussian>(mean_uses_B_toDef, mean_F, mean_uses_F_marginal);
				// Message to 'mean_uses' from Replicate factor
				this.mean_uses_F[2] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(mean_uses_B[2], mean_uses_F_marginal, 2, this.mean_uses_F[2]);
				// Message to 'variance_uses' from Gaussian factor
				this.variance_uses_B[2] = GaussianOp.PrecisionAverageConditional(Gaussian.PointMass(this.vdouble8), this.mean_uses_F[2], variance_uses_F[2]);
				// Message to 'mean_uses' from Replicate factor
				this.mean_uses_F[1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(mean_uses_B[1], mean_uses_F_marginal, 1, this.mean_uses_F[1]);
				// Message to 'variance_uses' from Gaussian factor
				this.variance_uses_B[1] = GaussianOp.PrecisionAverageConditional(Gaussian.PointMass(this.vdouble7), this.mean_uses_F[1], variance_uses_F[1]);
				// Message to 'mean_uses' from Replicate factor
				this.mean_uses_F[0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(mean_uses_B[0], mean_uses_F_marginal, 0, this.mean_uses_F[0]);
				// Message to 'variance_uses' from Gaussian factor
				this.variance_uses_B[0] = GaussianOp.PrecisionAverageConditional(Gaussian.PointMass(this.vdouble6), this.mean_uses_F[0], variance_uses_F[0]);
				this.variance_uses_B_toDef = ReplicateOp_Divide.ToDef<Gamma>(this.variance_uses_B, this.variance_uses_B_toDef);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			// Message to 'mean_marginal' from Variable factor
			this.mean_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(mean_uses_B_toDef, mean_F, this.mean_marginal_F);
			this.variance_marginal_F = Gamma.Uniform();
			// Message to 'variance_marginal' from Variable factor
			this.variance_marginal_F = VariableOp.MarginalAverageConditional<Gamma>(this.variance_uses_B_toDef, this.variance_F, this.variance_marginal_F);
			this.Changed_numberOfIterations_vdouble6_vdouble7_vdouble8_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to vdouble6 and vdouble7 and vdouble8</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_vdouble6_vdouble7_vdouble8(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_vdouble6_vdouble7_vdouble8_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_vdouble6_vdouble7_vdouble8_isInitialised)) {
				return ;
			}
			this.mean_uses_F[2] = Gaussian.Uniform();
			this.mean_uses_F[1] = Gaussian.Uniform();
			this.mean_uses_F[0] = Gaussian.Uniform();
			this.variance_uses_B_toDef = ReplicateOp_Divide.ToDefInit<Gamma>(this.variance_F);
			this.variance_uses_B[0] = Gamma.Uniform();
			this.variance_uses_B[1] = Gamma.Uniform();
			this.variance_uses_B[2] = Gamma.Uniform();
			this.Changed_numberOfIterationsDecreased_Init_vdouble6_vdouble7_vdouble8_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_vdouble6_vdouble7_vdouble8_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble6</summary>
		private void Changed_vdouble6()
		{
			if (this.Changed_vdouble6_isDone) {
				return ;
			}
			this.vdouble6_marginal_F = Gaussian.Uniform();
			// Message to 'vdouble6_marginal' from DerivedVariable factor
			this.vdouble6_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian,double>(this.vdouble6, this.vdouble6_marginal_F);
			this.Changed_vdouble6_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble7</summary>
		private void Changed_vdouble7()
		{
			if (this.Changed_vdouble7_isDone) {
				return ;
			}
			this.vdouble7_marginal_F = Gaussian.Uniform();
			// Message to 'vdouble7_marginal' from DerivedVariable factor
			this.vdouble7_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian,double>(this.vdouble7, this.vdouble7_marginal_F);
			this.Changed_vdouble7_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble8</summary>
		private void Changed_vdouble8()
		{
			if (this.Changed_vdouble8_isDone) {
				return ;
			}
			this.vdouble8_marginal_F = Gaussian.Uniform();
			// Message to 'vdouble8_marginal' from DerivedVariable factor
			this.vdouble8_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian,double>(this.vdouble8, this.vdouble8_marginal_F);
			this.Changed_vdouble8_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for 'mean_uses' Forwards messages.
			this.mean_uses_F = new Gaussian[3];
			this.variance_F = Gamma.Uniform();
			// Create array for 'variance_uses' Backwards messages.
			this.variance_uses_B = new Gamma[3];
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_Init_vdouble6_vdouble7_vdouble8_isDone = false;
				}
				this.Changed_numberOfIterations_vdouble6_vdouble7_vdouble8_isDone = false;
			}
			this.Changed_vdouble8();
			this.Changed_vdouble7();
			this.Changed_vdouble6();
			this.Constant();
			this.Changed_numberOfIterationsDecreased_Init_vdouble6_vdouble7_vdouble8(initialise);
			this.Changed_numberOfIterations_vdouble6_vdouble7_vdouble8(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vdouble6") {
				return this.vdouble6;
			}
			if (variableName=="vdouble7") {
				return this.vdouble7;
			}
			if (variableName=="vdouble8") {
				return this.vdouble8;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vdouble8") {
				return this.Vdouble8Marginal();
			}
			if (variableName=="vdouble7") {
				return this.Vdouble7Marginal();
			}
			if (variableName=="vdouble6") {
				return this.Vdouble6Marginal();
			}
			if (variableName=="mean") {
				return this.MeanMarginal();
			}
			if (variableName=="variance") {
				return this.VarianceMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>
		/// Returns the marginal distribution for 'mean' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian MeanMarginal()
		{
			return this.mean_marginal_F;
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vdouble6") {
				this.vdouble6 = (double)value;
				return ;
			}
			if (variableName=="vdouble7") {
				this.vdouble7 = (double)value;
				return ;
			}
			if (variableName=="vdouble8") {
				this.vdouble8 = (double)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'variance' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma VarianceMarginal()
		{
			return this.variance_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble6' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble6Marginal()
		{
			return this.vdouble6_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble7' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble7Marginal()
		{
			return this.vdouble7_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble8' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble8Marginal()
		{
			return this.vdouble8_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
